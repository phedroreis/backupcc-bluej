#BlueJ class context
comment0.target=Tui
comment0.text=\n\ Esta\ classe\ fornece\ metodos\ estaticos\ basicos\ para\ a\ construcao\ da\ Text\n\ User\ Interface\ (TUI)\ do\ programa.\ O\ objetivo\ eh\ fornecer\ metodos\ basicos\ para\ \n\ controlar\ cores\ e\ cursor\ em\ terminais\ compativeis\ com\ o\ padrao\ POSIX\ de\ \n\ sistemas\ UNIX\ LIKE,\ como\ o\ Linux\ e\ MacOS.\ \n\ \n\ Quando\ a\ interface\ executar\ em\ um\ terminal\ em\ sistema\ Windows\ os\ comandos\ \n\ ANSI\ nao\ serao\ enviados\ ao\ terminal.\n\ \n\ @since\ 16\ de\ agosto\ de\ 2022\n\ @version\ 1.0\n\ @author\ "Pedro\ Reis"\n
comment1.params=
comment1.target=void\ ansiCodesEnable()
comment1.text=\n\ Habilita\ envio\ de\ codigos\ de\ controle\ ansi\ mesmo\ se\ o\ sistema\ for\ \n\ Windows.\n
comment10.params=s
comment10.target=void\ println(java.lang.String)
comment10.text=\n\ Imprime\ uma\ string\ no\ terminal\ e\ salta\ para\ a\ proxima\ linha.\n\ \n\ @param\ s\ A\ string\ a\ ser\ impressa\ no\ terminal.\n
comment11.params=
comment11.target=void\ resetColorsAndDecorations()
comment11.text=\n\ Depois\ da\ execucao\ deste\ metodo,\ qualquer\ customizacao\ de\ cor\ ou\ de\ \n\ efeitos\ no\ texto\ serah\ desligada.\n
comment12.params=
comment12.target=void\ restoreTerminalDefaults()
comment12.text=\n\ Restaura\ o\ estado\ original\ do\ terminal.\ Cores\ e\ reexibe\ o\ cursor\ caso\n\ este\ tenha\ sido\ ocultado.\n
comment13.params=color
comment13.target=void\ setColor(int)
comment13.text=\n\ Ajusta\ a\ cor\ do\ texto\ no\ terminal.\ Desde\ que\ nao\ seja\ terminal\ Windows.\ A\n\ cor\ configurada\ aqui\ ira\ perdurar\ ate\ que\ outra\ seja\ definida\ ou\ o\ metodo\n\ resetColorsAndDecorations()\ executado.\n\ \n\ @param\ color\ Uma\ cor\ que\ deve\ ser\ um\ valor\ entre\ 0\ e\ 7,\ -1\ reseta\ as\ \n\ customizacoes\ de\ cores\ e\ efeitos\ de\ texto.\n
comment14.params=color
comment14.target=void\ setBgColor(int)
comment14.text=\n\ Como\ o\ metodo\ setcolor(),\ soh\ que\ para\ as\ cores\ de\ fundo\ do\ terminal.\n\ \n\ @param\ color\ A\ cor\ do\ fundo\ do\ terminal.\n
comment15.params=s\ color
comment15.target=void\ printc(java.lang.String,\ int)
comment15.text=\n\ Imprime\ uma\ string\ (sem\ avancar\ a\ linha)\ no\ terminal\ com\ uma\ cor\ \n\ especificada.\ Apos\ a\ execucao\ deste\ metodo\ as\ customizacoes\ de\ cor\ e\ \n\ decoracao\ de\ texto\ sao\ resetadas.\n\ \n\ @param\ s\ A\ string.\n\ \n\ @param\ color\ A\ cor\ da\ string.\n
comment16.params=s\ color
comment16.target=void\ printlnc(java.lang.String,\ int)
comment16.text=\n\ Como\ o\ metodo\ printc,\ mas\ avanca\ o\ cursor\ uma\ linha\ apos\ imprimir\ a\ \n\ string\ no\ terminal.\n\ \n\ @param\ s\ A\ string.\n\ \n\ @param\ color\ A\ cor\ da\ string.\n
comment17.params=decoration
comment17.target=void\ setDecoration(int)
comment17.text=\n\ Ajusta\ efeitos\ do\ texto\ no\ terminal.\n\ \n\ @param\ decoration\ 1\ \=\ negrito\ 4\ \=\ sublinhado\ 7\ \=\ invertido\ Estes\ valores\n\ podem\ ser\ somados\ para\ sobrepor\ os\ efeitos.\n
comment18.params=s1\ s2\ s3\ color
comment18.target=void\ decoratedPrintlnc(java.lang.String,\ java.lang.String,\ java.lang.String,\ int)
comment18.text=\n\ Para\ destacar\ uma\ substring\ em\ uma\ string.\ Imprime\ s1,\ s2\ e\ s3\ decorando\ \n\ s2\ em\ negrito,\ sublinhado\ e\ cor\ padr\u00E3o\ do\ terminal.\ \n\ \n\ @param\ s1\ Parte\ da\ String\ que\ ser\u00E1\ impressa\ em\ cor\ color.\n\ @param\ s2\ Parte\ da\ String\ decorada.\n\ @param\ s3\ Parte\ da\ String\ que\ ser\u00E1\ impressa\ em\ cor\ color.\n\ \n\ @param\ color\ Cor\ do\ texto.\n
comment2.params=
comment2.target=void\ ansiCodesDisable()
comment2.text=\n\ Desabilita\ envio\ de\ codigos\ de\ controle\ ansi\ mesmo\ se\ o\ sisetma\ for\ \n\ "unix\ like".\n
comment3.params=
comment3.target=boolean\ isWindowsOS()
comment3.text=\n\ Retorna\ se\ o\ sistema\ eh\ um\ Windows.\n\ \n\ @return\ true\ se\ for\ um\ sistema\ da\ Microsoft.\ false\ se\ nao.\n
comment4.params=command
comment4.target=void\ ansiCode(java.lang.String)
comment4.text=\n\ Envia\ um\ ansi\ escape\ code\ para\ o\ terminal\ caso\ o\ sistema\ nao\ seja\ \n\ Windows.\n\ \n\ @param\ command\ O\ comando\ ANSI.\n
comment5.params=command
comment5.target=void\ ansiCode(int)
comment5.text=\n\ Envia\ um\ comando\ ANSI\ para\ o\ terminal\ compativel\ com\ padrao\ UNIX,\ caso\n\ o\ comando\ seja\ um\ valor\ numerico.\ \n\ \n\ @param\ command\ Quando\ o\ comando\ eh\ um\ valor\ numerico.\n
comment6.params=
comment6.target=void\ hideCursor()
comment6.text=\n\ Comando\ para\ esconder\ o\ cursor\ no\ terminal.\n
comment7.params=
comment7.target=void\ showCursor()
comment7.text=\n\ Comando\ para\ voltar\ a\ exibir\ o\ cursor\ no\ terminal.\n
comment8.params=
comment8.target=void\ resetCursorPosition()
comment8.text=\n\ Retorna\ o\ cursor\ para\ o\ inicio\ da\ linha\ onde\ estiver\ posicionado.\n
comment9.params=s
comment9.target=void\ print(java.lang.String)
comment9.text=\n\ Imprime\ uma\ string\ no\ terminal\ e\ mantem\ o\ cursor\ na\ mesma\ linha.\n\ \n\ @param\ s\ A\ String\ a\ ser\ impressa\ no\ terminal.\n
numComments=19
